namespace uavcan.samples
{
	type S00_t_uint4
	{
		truncated uint4 val
	}
    .{0}
    .{1}
    .{15}
    .{248}@disableRoundtripTest
    .{255}@disableRoundtripTest

	type S01_s_uint4
	{
		saturated uint4 val
	}
    .{0}
    .{1}
    .{15}
    .{248}@disableRoundtripTest
    .{255}@disableRoundtripTest

	type S02_uint64
	{
		uint64 val
	}
    .{0}
    .{1}
    .{18446744073709551615}

	type S03_int64
	{
		int64 val
	}
    .{0}
    .{1}
    .{-1}
    .{-150}
    .{-9223372036854775808}
    .{9223372036854775807}

	type S04_bool
	{
		bool val
	}
    .{true}
    .{false}

	type S05_float16
	{
		float16 val
	}
    .{0}
    .{1}
    .{-1}
    .{1.2E+10f}@disableRoundtripTest
    .{1.2E+2f}
    .{1.2E-2f}

	type S06_float64
	{
		float64 val
	}
    .{0}
    .{1.7976931348623157E+308}
    .{-1.7976931348623157E+308}
    .{0.1}

	type S07_as4_uint8
	{
		uint8[4] val
	}
    .{[0,0,0,0]}
    .{[0,1,2,3]}
    .{[255,255,255,255]}
    

	type S08_ad4_uint8
	{
		uint8[<=4] val
	}
    .{[]}
    .{[0]}
    .{[0,0]}
    .{[0,0,0]}
    .{[0,0,0,0]}
    .{[1]}
    .{[1,1]}
    .{[1,1,1]}
    .{[1,1,1,1]}

	type S09_as4_uint8_ad4_uint8
	{
		uint8[4] val0
		uint8[<=4] val1
	}
    .{[1,1,1,1],[]}
    .{[1,1,1,1],[1,1,1,1]}

	type S10_ad4_uint8_as4_uint8
	{
		uint8[<=4] val0
		uint8[4] val1
	}
    .{[],[1,1,1,1]}
    .{[1,1,1,1],[1,1,1,1]}
    
	type S11_s_int24
	{
		saturated int24 val
	}
    .{0}
    .{4194304}
    .{-2097152}
    .{134217743}@disableRoundtripTest
    .{-134217744}@disableRoundtripTest
    
    type S12_s_uint24
	{
		saturated uint24 val
	}
    .{0}
    .{4194304}
    .{2097152}
    .{134217743}@disableRoundtripTest
    .{134217744}@disableRoundtripTest
    
    type S14_s_uint24
	{
		truncated uint24 val
	}
    .{0}
    .{4194304}
    .{2097152}
    .{134217743}@disableRoundtripTest
    .{134217744}@disableRoundtripTest
    
    type CmpTestA
    {
        int8 field
    }
    
    type CmpTestA_A
    {
        int8 field
        CmpTestA a
    }
    .{123, {7}}
    
    type TAO1
    {
        uint8 foo
        uint8[<9] array
    }
    .{0, []}
    .{0, [1,2,3,4,5,6,7,8]}
    
    type TAO2
    {
        float16 foo
        uint7[<=8] array
    }
    .{32, []}
    .{32, [1,2,3,4]}
    
    type TAO3
    {
        uint8[<=8] array
        float16 bar
    }
    .{[2,3], 213}
    
    type TAO4
    {
        bool[<=42] array
    }
    .{[true, false]}
    
    type TAO5
    {
        TAO4[<=42] array
    }
    .{[{[true]},{[]},{[true, true, false]}]}
    
    type TAO6
    {
        TAO1[<=2] array
    }
    .{[{123, {7}}]}
    
    type TAO7
    {
        TAO1[<=2] array
        float16 baz
    }
    .{[{123, {7}}], 123}
    
    type TAO8
    {
        int4 fooz
        float64[<=64] array
    }
    .{2, [1.1, 1.2, 1.3]}
    
    type TAO9
    {
        TAO8[<=12] array
    }
    .{[{2, [1.1, 1.2, 1.3]}, {2, [1.1, 1.2, 1.3]}, {2, [1.1, 1.2, 1.3]}]}
    
    type Union1
    {
        @union                  # In this case, the union tag requires 2 bits
        uint16 FOO = 42         # A regular constant attribute
        uint16 a                # Index 0
        uint8 b                 # Index 1
        float64 c               # Index 2
        uint32 BAR = 42         # Another regular constant
    }
    .{null, 25, null}
    .{25, null, null}
    .{null, null, 1.2}
    
    type Void1
    {
        void1
        int8 i
        void10
    }
    .{12}
    
    namespace getsettest
    {
        type Empty
        {
            #
            # Ex nihilo nihil fit.
            #
        }
        
        type NumericValue
        {
            @union
            Empty empty
            int64   integer_value
            float32 real_value
        }
        
        type Value
        {
            @union
            Empty empty
            int64        integer_value
            float32      real_value
            uint8        boolean_value
            uint8[<=128] string_value
        }
        
        type GetSet
        {
            void5
            Value value
            void5
            NumericValue max_value
            void6
            uint8[<=92] name
        }
        .{{{},null,null,null,null},{null,2524353,null},[1,2,3,0]}
        .{{null,null,null,null,[1,4,6,3,0]},{null,2524353,null},[1,2,3,0]}
    }
}